AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Environment:
      Variables:
        APP_ENV: prod
        YOUTUBE_APIKEY: 'AIzaSyC1V2-epGTfV7osfd3M_ROm0hZnQzCbH_w'

Resources:
  Website:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'symfony-website'
      CodeUri: .
      Handler: public/index.php
      Timeout: 30 # in seconds (API Gateway has a timeout of 30 seconds)
      MemorySize: 1024
      Runtime: provided
      Layers:
        - 'arn:aws:lambda:eu-west-3:209497400698:layer:php-73-fpm:7'
      Events:
        Homepage:
          Type: Api
          Properties:
            Path: /
            Method: GET
        Search:
          Type: Api
          Properties:
            Path: /search/{app}
            Method: POST
        NostalgicSearch:
          Type: Api
          Properties:
            Path: /nostalgic/channel/{slug}/period/{period}
            Method: GET
        YearInReview:
          Type: Api
          Properties:
            Path: /yearinreview/channel/{slug}/period/{period}
            Method: GET

  # The S3 bucket that stores the assets
  Assets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: www.nostalgicchannels.com
      # Enables static website hosting
      WebsiteConfiguration:
        IndexDocument: index.html # Use index.html as the root file
  # The policy that makes the bucket publicly readable (necessary for a public website)
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Assets
      PolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal: '*' # everyone
            Action: 's3:GetObject' # to read
            Resource: !Sub '${Assets.Arn}/*' # everything in the bucket

  WebsiteCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        # Cheapest option by default (https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_DistributionConfig.html)
        PriceClass: PriceClass_100
        HttpVersion: http2
        # Enable http2 transfer for better performance
        # Origins are where CloudFront fetches content
        Origins:
          # The website (AWS Lambda)
          -   Id: Website
              DomainName: !Sub '${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com'
              OriginPath: '/Prod'
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only' # API Gateway only supports HTTPS
          # The assets (S3)
          -   Id: Assets
            # Watch out, use s3-website URL (https://stackoverflow.com/questions/15309113/amazon-cloudfront-doesnt-respect-my-s3-website-buckets-index-html-rules#15528757)
              DomainName: !Sub '${Assets}.s3-website.${AWS::Region}.amazonaws.com'
              CustomOriginConfig:
                OriginProtocolPolicy: 'http-only' # S3 websites only support HTTP
        # The default behavior is to send everything to AWS Lambda
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          TargetOriginId: Website # the PHP application
          # Disable caching for the PHP application https://aws.amazon.com/premiumsupport/knowledge-center/prevent-cloudfront-from-caching-files/
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-forwardedvalues.html
          ForwardedValues:
            QueryString: true
            # We must *not* forward the `Host` header else it messes up API Gateway
            Headers:
              - 'Accept'
              - 'Accept-Language'
              - 'Origin'
              - 'Referer'
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          # Assets will be served under the `/assets/` prefix
          -   PathPattern: 'assets/*'
              TargetOriginId: Assets # the static files on S3
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                # No need for all that with assets
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true # Serve files with gzip for browsers that support it (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html)
        CustomErrorResponses:
          # Do not cache HTTP errors
          # Do not cache HTTP errors
          -   ErrorCode: 500
              ErrorCachingMinTTL: 0
          -   ErrorCode: 504
              ErrorCachingMinTTL: 0
          -   ErrorCode: 404
              ErrorCachingMinTTL: 0
        # Custom domain name
        Aliases:
          - www.nostalgicchannels.com
          - www.yearinreviewchannels.com
        ViewerCertificate:
          # ARN of the certificate created in ACM
          AcmCertificateArn: arn:aws:acm:us-east-1:737778013917:certificate/e82126b3-122d-44d0-bea1-2046d6c8f797
          # See https://docs.aws.amazon.com/fr_fr/cloudfront/latest/APIReference/API_ViewerCertificate.html
          SslSupportMethod: 'sni-only'
          MinimumProtocolVersion: TLSv1.1_2016

  Console:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'symfony-console'
      CodeUri: .
      Handler: bin/console
      Timeout: 120 # in seconds
      Runtime: provided
      Layers:
        - 'arn:aws:lambda:eu-west-3:209497400698:layer:php-73:7' # PHP
        - 'arn:aws:lambda:eu-west-3:209497400698:layer:console:7' # The "console" layer

Outputs:
  DemoApi:
    Description: 'URL of our function in the *Prod* environment'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
